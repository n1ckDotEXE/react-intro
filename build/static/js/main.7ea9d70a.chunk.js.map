{"version":3,"sources":["app-10/common/Button.js","app-10/Child1-ul.js","app-10/Child2-form.js","app-10/Parent.js","App.js","index.js"],"names":["Button","props","onClick","propsOnClick","className","propsClassName","propsName","Child1UL","state","toggleInput","handleToggleOnChange","event","setState","target","value","handleToggleButton","id","itemTodo","handleEditToggle","handleEditUpdateTodo","this","todoList","map","item","strikeThroughClass","isDone","Fragment","isEditToggle","style","marginRight","onChange","name","todo","handleIsDone","handleDeleteByID","Component","Child2Form","onSubmit","handleSubmitTodo","htmlFor","type","placeholder","handleOnChange","inputTodo","Parent","uuidv4","preventDefault","newTodoArray","console","log","filteredTodoListArray","filter","updatedTodoListArray","toggledTodoList","newTodoItem","updatedTodoItem","App","ReactDOM","render","document","getElementById"],"mappings":"qRAUeA,EARA,SAACC,GACd,OACE,wBAAQC,QAASD,EAAME,aAAcC,UAAWH,EAAMI,eAAtD,SACGJ,EAAMK,aC0FEC,G,MAzFf,4MACEC,MAAQ,CACNC,YAAa,IAFjB,EAKEC,qBAAuB,SAACC,GACtB,EAAKC,SAAS,CACZH,YAAaE,EAAME,OAAOC,SAPhC,EAWEC,mBAAqB,SAACC,EAAIC,GACxB,EAAKL,SAAS,CACZH,YAAaQ,IAEf,EAAKhB,MAAMiB,iBAAiBF,GAC5B,EAAKf,MAAMkB,qBAAqBH,EAAI,EAAKR,MAAMC,cAhBnD,4CAmBE,WAAU,IAAD,OACP,OACE,6BACGW,KAAKnB,MAAMoB,SAASC,KAAI,SAACC,GACxB,IAAIC,EAAkB,UACpBD,EAAKE,OAAS,wBAA0B,IAG1C,OACE,eAAC,IAAMC,SAAP,WAMGH,EAAKI,aACJ,uBACEb,MAAO,EAAKN,MAAMC,YAClBmB,MAAO,CAAEC,YAAa,IACtBC,SAAU,EAAKpB,qBACfqB,KAAK,gBAGP,oBAAI3B,UAAWoB,EAAf,SAAoCD,EAAKS,OAG3C,cAAC,EAAD,CACE3B,eAAgB,+BAChBC,UAAWiB,EAAKI,aAAe,SAAW,OAC1CxB,aAAc,kBAAM,EAAKY,mBAAmBQ,EAAKP,GAAIO,EAAKS,SAG5D,cAAC,EAAD,CACE3B,eAAgB,+BAChBF,aAAc,kBAAM,EAAKF,MAAMgC,aAAaV,EAAKP,KACjDV,UAAW,SAEb,cAAC,EAAD,CACED,eAAgB,8BAChBF,aAAc,kBAAM,EAAKF,MAAMiC,iBAAiBX,EAAKP,KACrDV,UAAW,WAeb,yBA9CmBiB,EAAKP,aA5BtC,GAA8BmB,cC6BfC,E,4JA/Bb,WACE,OACE,uBAAMC,SAAUjB,KAAKnB,MAAMqC,iBAA3B,UACE,sBAAKlC,UAAU,OAAf,UACE,uBAAOmC,QAAQ,2BAA2BnC,UAAU,aAApD,wBAGA,uBACEoC,KAAK,OACLpC,UAAU,eACVY,GAAG,2BACHyB,YAAY,aACZV,KAAK,YACLD,SAAUV,KAAKnB,MAAMyC,eACrB5B,MAAOM,KAAKnB,MAAM0C,eAGtB,wBAAQvC,UAAU,uBAAuBoC,KAAK,SAA9C,2B,GAlBiBL,aCkIVS,G,kNA5HbpC,MAAQ,CACNa,SAAU,CACR,CACEL,GAAI6B,cACJb,KAAM,eACNP,QAAQ,EACRE,cAAc,GAEhB,CACEX,GAAI6B,cACJb,KAAM,WACNP,QAAQ,EACRE,cAAc,GAEhB,CACEX,GAAI6B,cACJb,KAAM,cACNP,QAAQ,EACRE,cAAc,IAGlBgB,UAAW,I,EAGbL,iBAAmB,SAAC3B,GAClBA,EAAMmC,iBAEN,IAAIC,EAAY,sBACX,EAAKvC,MAAMa,UADA,CAEd,CACEL,GAAI6B,cACJb,KAAM,EAAKxB,MAAMmC,UACjBlB,QAAQ,EACRE,cAAc,KAIlB,EAAKf,SAAS,CACZS,SAAU0B,EACVJ,UAAW,M,EAIfD,eAAiB,SAAC/B,GAChB,EAAKC,SAAS,CACZ+B,UAAWhC,EAAME,OAAOC,S,EAI5BoB,iBAAmB,SAAClB,GAClBgC,QAAQC,IAAIjC,GAEZ,IAAIkC,EAAwB,EAAK1C,MAAMa,SAAS8B,QAC9C,SAAC5B,GAAD,OAAUA,EAAKP,KAAOA,KAGxB,EAAKJ,SAAS,CACZS,SAAU6B,K,EAIdjB,aAAe,SAACjB,GAKd,IAAIoC,EAAuB,EAAK5C,MAAMa,SAASC,KAAI,SAACC,GAIlD,OAHIA,EAAKP,KAAOA,IACdO,EAAKE,QAAUF,EAAKE,QAEfF,KAET,EAAKX,SAAS,CACZS,SAAU+B,K,EAIdlC,iBAAmB,SAACF,GAClB,IAAIqC,EAAkB,EAAK7C,MAAMa,SAASC,KAAI,SAACC,GAI7C,OAHIA,EAAKP,KAAOA,IACdO,EAAKI,cAAgBJ,EAAKI,cAErBJ,KAGT,EAAKX,SAAS,CACZS,SAAUgC,K,EAIdlC,qBAAuB,SAACH,EAAIsC,GAC1B,IAAIC,EAAkB,EAAK/C,MAAMa,SAASC,KAAI,SAACC,GAI7C,OAHIA,EAAKP,KAAOA,IACdO,EAAKS,KAAOsB,GAEP/B,KAGT,EAAKX,SAAS,CACZS,SAAUkC,K,4CAId,WACE,OACE,sBAAKnD,UAAU,mBAAf,UACE,cAAC,EAAD,CAEEkC,iBAAkBlB,KAAKkB,iBACvBI,eAAgBtB,KAAKsB,eACrBC,UAAWvB,KAAKZ,MAAMmC,YAExB,cAAC,EAAD,CACEtB,SAAUD,KAAKZ,MAAMa,SACrBa,iBAAkBd,KAAKc,iBACvBD,aAAcb,KAAKa,aACnBf,iBAAkBE,KAAKF,iBACvBC,qBAAsBC,KAAKD,8B,GAtHhBgB,cCDAqB,E,4JACnB,WACE,OACE,8BACE,cAAC,EAAD,U,GAJyBrB,aCFjCsB,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.7ea9d70a.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Button = (props) => {\n  return (\n    <button onClick={props.propsOnClick} className={props.propsClassName}>\n      {props.propsName}\n    </button>\n  );\n};\n\nexport default Button;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button from \"./common/Button\";\n\nimport \"./Child1-ul.css\";\n\nexport class Child1UL extends Component {\n  state = {\n    toggleInput: \"\",\n  };\n\n  handleToggleOnChange = (event) => {\n    this.setState({\n      toggleInput: event.target.value,\n    });\n  };\n\n  handleToggleButton = (id, itemTodo) => {\n    this.setState({\n      toggleInput: itemTodo,\n    });\n    this.props.handleEditToggle(id);\n    this.props.handleEditUpdateTodo(id, this.state.toggleInput);\n  };\n\n  render() {\n    return (\n      <ul>\n        {this.props.todoList.map((item) => {\n          let strikeThroughClass = `${\n            item.isDone ? \"strike-through-isDone\" : \"\"\n          }`;\n\n          return (\n            <React.Fragment key={item.id}>\n              {/* <li style={{ textDecoration: item.isDone ? \"line-through\" : \"\" }}> */}\n              {/* <li className={`${item.isDone ? \"strike-through-isDone\" : \"\"}`}> */}\n              {/* <li style={{ textDecoration: item.isDone && \"line-through\" }}> */}\n              {/* <li className={strikeThroughClass}>{item.todo}</li>{\" \"} */}\n\n              {item.isEditToggle ? (\n                <input\n                  value={this.state.toggleInput}\n                  style={{ marginRight: 10 }}\n                  onChange={this.handleToggleOnChange}\n                  name=\"toggleInput\"\n                />\n              ) : (\n                <li className={strikeThroughClass}>{item.todo}</li>\n              )}\n\n              <Button\n                propsClassName={\"btn btn-success button-style\"}\n                propsName={item.isEditToggle ? \"Submit\" : \"Edit\"}\n                propsOnClick={() => this.handleToggleButton(item.id, item.todo)}\n                //propsOnClick={() => this.props.handleEditToggle(item.id)}\n              />\n              <Button\n                propsClassName={\"btn btn-warning button-style\"}\n                propsOnClick={() => this.props.handleIsDone(item.id)}\n                propsName={\"Done\"}\n              />\n              <Button\n                propsClassName={\"btn btn-danger button-style\"}\n                propsOnClick={() => this.props.handleDeleteByID(item.id)}\n                propsName={\"Delete\"}\n              />\n              {/* <button\n              className=\"btn btn-warning button-style\"\n              onClick={() => props.handleIsDone(item.id)}\n            >\n              Done\n            </button>\n            <button\n              className=\"btn btn-danger button-style\"\n              onClick={() => props.handleDeleteByID(item.id)}\n              //onClick={this.handleDeleteByID(item.id)}\n            >\n              Delete\n            </button> */}\n              <br />\n            </React.Fragment>\n          );\n        })}\n      </ul>\n    );\n  }\n}\n\nChild1UL.propTypes = {\n  todoList: PropTypes.array.isRequired,\n  handleDeleteByID: PropTypes.func.isRequired,\n  handleIsDone: PropTypes.func.isRequired,\n};\n\nexport default Child1UL;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Child2Form extends Component {\n  render() {\n    return (\n      <form onSubmit={this.props.handleSubmitTodo}>\n        <div className=\"mb-3\">\n          <label htmlFor=\"exampleFormControlInput1\" className=\"form-label\">\n            Enter Todo\n          </label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"exampleFormControlInput1\"\n            placeholder=\"Enter Todo\"\n            name=\"inputTodo\"\n            onChange={this.props.handleOnChange}\n            value={this.props.inputTodo}\n          />\n        </div>\n        <button className=\"btn btn-primary mb-3\" type=\"submit\">\n          Submit\n        </button>\n      </form>\n    );\n  }\n}\n\nChild2Form.propTypes = {\n  handleSubmitTodo: PropTypes.func.isRequired,\n  handleOnChange: PropTypes.func.isRequired,\n  inputTodo: PropTypes.string.isRequired,\n};\n\nexport default Child2Form;\n","import React, { Component } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport Child1UL from \"./Child1-ul\";\nimport Child2Form from \"./Child2-form\";\n\nimport \"./Parent.css\";\n\nclass Parent extends Component {\n  state = {\n    todoList: [\n      {\n        id: uuidv4(),\n        todo: \"walk the dog\",\n        isDone: false,\n        isEditToggle: false,\n      },\n      {\n        id: uuidv4(),\n        todo: \"buy milk\",\n        isDone: false,\n        isEditToggle: false,\n      },\n      {\n        id: uuidv4(),\n        todo: \"wash dishes\",\n        isDone: false,\n        isEditToggle: false,\n      },\n    ],\n    inputTodo: \"\",\n  };\n\n  handleSubmitTodo = (event) => {\n    event.preventDefault();\n\n    let newTodoArray = [\n      ...this.state.todoList,\n      {\n        id: uuidv4(),\n        todo: this.state.inputTodo,\n        isDone: false,\n        isEditToggle: false,\n      },\n    ];\n\n    this.setState({\n      todoList: newTodoArray,\n      inputTodo: \"\",\n    });\n  };\n\n  handleOnChange = (event) => {\n    this.setState({\n      inputTodo: event.target.value,\n    });\n  };\n\n  handleDeleteByID = (id) => {\n    console.log(id);\n\n    let filteredTodoListArray = this.state.todoList.filter(\n      (item) => item.id !== id\n    );\n\n    this.setState({\n      todoList: filteredTodoListArray,\n    });\n  };\n\n  handleIsDone = (id) => {\n    //go through the array and find the ID of the todo\n    //Then flip the todo from false to true or true to false\n    //then set new state\n\n    let updatedTodoListArray = this.state.todoList.map((item) => {\n      if (item.id === id) {\n        item.isDone = !item.isDone;\n      }\n      return item;\n    });\n    this.setState({\n      todoList: updatedTodoListArray,\n    });\n  };\n\n  handleEditToggle = (id) => {\n    let toggledTodoList = this.state.todoList.map((item) => {\n      if (item.id === id) {\n        item.isEditToggle = !item.isEditToggle;\n      }\n      return item;\n    });\n\n    this.setState({\n      todoList: toggledTodoList,\n    });\n  };\n\n  handleEditUpdateTodo = (id, newTodoItem) => {\n    let updatedTodoItem = this.state.todoList.map((item) => {\n      if (item.id === id) {\n        item.todo = newTodoItem;\n      }\n      return item;\n    });\n\n    this.setState({\n      todoList: updatedTodoItem,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"parent-container\">\n        <Child2Form\n          //onSubmit={this.handleSubmitTodo}\n          handleSubmitTodo={this.handleSubmitTodo}\n          handleOnChange={this.handleOnChange}\n          inputTodo={this.state.inputTodo}\n        />\n        <Child1UL\n          todoList={this.state.todoList}\n          handleDeleteByID={this.handleDeleteByID}\n          handleIsDone={this.handleIsDone}\n          handleEditToggle={this.handleEditToggle}\n          handleEditUpdateTodo={this.handleEditUpdateTodo}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Parent;\n","import React, { Component } from \"react\";\n// import Gif from \"./app-6/Gif\";\n// import Gif from \"./app-7/Gif\";\n// import Gif from \"./app-8/Gif\";\n// import Gif from \"./app-9/Gif\";\nimport Parent from \"./app-10/Parent\";\n// import LifeCycle from \"./app-11-lifecycle/LifeCycle\";\nexport default class App extends Component {\n  render() {\n    return (\n      <div>\n        <Parent />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}